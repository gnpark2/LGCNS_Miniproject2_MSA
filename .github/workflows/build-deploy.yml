# <EUREKA_PRIVATE_IP>는 gateway EC2의 사설 IP로 바꾸기
name: Build & Deploy

on:
  push:
    branches: [ "main" ]
    paths:
      - 'eureka-server/**'
      - 'api-gateway/**'
      - 'user-service/**'
      - 'routine-service/**'
      - 'deploy/**'

jobs:
  build-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [eureka-server, api-gateway, user-service, routine-service]
    steps:
      - uses: actions/checkout@v4
      - name: Login GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build ${{ matrix.module }}
        run: |
          cd ${{ matrix.module }}
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ matrix.module }}:${{ github.sha }} .
          docker push ghcr.io/${{ github.repository_owner }}/${{ matrix.module }}:${{ github.sha }}
      - name: Export image tag
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

  deploy-gateway:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to gateway EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_GATEWAY_HOST }}
          username: ${{ secrets.SSH_GATEWAY_USER }}
          key: ${{ secrets.SSH_GATEWAY_KEY }}
          script: |
            mkdir -p ~/deploy/gateway
            cat > ~/deploy/gateway/docker-compose.yml <<'EOF'
            version: "3.8"
            services:
              eureka:
                image: ghcr.io/${{ github.repository_owner }}/eureka-server:${{ github.sha }}
                container_name: eureka
                ports: ["8761:8761"]
                restart: unless-stopped

              api-gateway:
                image: ghcr.io/${{ github.repository_owner }}/api-gateway:${{ github.sha }}
                container_name: api-gateway
                environment:
                  - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
                ports: ["80:8080"]
                depends_on: [eureka]
                restart: unless-stopped
            EOF
            cd ~/deploy/gateway && docker compose pull && docker compose up -d

  deploy-service:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to service EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_SERVICE_HOST }}
          username: ${{ secrets.SSH_SERVICE_USER }}
          key: ${{ secrets.SSH_SERVICE_KEY }}
          script: |
            mkdir -p ~/deploy/service/nginx ~/deploy/service/dbdata
            cat > ~/deploy/service/.env <<'ENV'
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            IMAGE_TAG=${{ github.sha }}
            ENV

            cat > ~/deploy/service/docker-compose.yml <<'EOF'
            version: "3.8"
            services:
              mariadb:
                image: mariadb:10.6
                container_name: mariadb
                environment:
                  - MARIADB_DATABASE=health_routine
                  - MARIADB_USER=health
                  - MARIADB_PASSWORD=${DB_PASSWORD}
                  - MARIADB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
                volumes:
                  - ./dbdata:/var/lib/mysql
                ports: ["3306:3306"]
                restart: unless-stopped

              user-service-1:
                image: ghcr.io/${{ github.repository_owner }}/user-service:${IMAGE_TAG}
                environment:
                  - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/health_routine
                  - SPRING_DATASOURCE_USERNAME=health
                  - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
                  - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://<EUREKA_PRIVATE_IP>:8761/eureka/
                expose: ["8081"]
                depends_on: [mariadb]
                restart: unless-stopped

              user-service-2:
                image: ghcr.io/${{ github.repository_owner }}/user-service:${IMAGE_TAG}
                environment:
                  - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/health_routine
                  - SPRING_DATASOURCE_USERNAME=health
                  - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
                  - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://<EUREKA_PRIVATE_IP>:8761/eureka/
                expose: ["8081"]
                depends_on: [mariadb]
                restart: unless-stopped

              routine-service-1:
                image: ghcr.io/${{ github.repository_owner }}/routine-service:${IMAGE_TAG}
                environment:
                  - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/health_routine
                  - SPRING_DATASOURCE_USERNAME=health
                  - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
                  - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://<EUREKA_PRIVATE_IP>:8761/eureka/
                expose: ["8082"]
                depends_on: [mariadb]
                restart: unless-stopped

              nginx-cache:
                image: nginx:1.27
                container_name: nginx-cache
                volumes:
                  - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
                  - ./nginx/cache:/var/cache/nginx
                ports: ["9000:9000"]
                depends_on: [user-service-1, user-service-2, routine-service-1]
                restart: unless-stopped
            EOF

            cat > ~/deploy/service/nginx/nginx.conf <<'EOF'
            worker_processes auto;
            events { worker_connections 4096; }
            http {
              proxy_buffering on;
              proxy_buffers 16 16k;
              proxy_busy_buffers_size 24k;
              proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=apicache:256m max_size=2g inactive=10m use_temp_path=off;

              map $http_authorization $bypass_cache { default 1; "" 0; }

              upstream user_upstream {
                server user-service-1:8081;
                server user-service-2:8081;
              }
              upstream routine_upstream { server routine-service-1:8082; }

              server {
                listen 9000;
                location ^~ /users/ {
                  proxy_pass http://user_upstream;
                  proxy_set_header Host $host;
                  proxy_cache apicache;
                  proxy_cache_bypass $bypass_cache;
                  proxy_cache_key "$request_method|$scheme://$host$request_uri";
                  proxy_ignore_headers Set-Cookie;
                  add_header X-Cache-Status $upstream_cache_status;
                }
                location ^~ /routines/ {
                  proxy_pass http://routine_upstream;
                  proxy_set_header Host $host;
                  proxy_cache apicache;
                  proxy_cache_bypass $bypass_cache;
                  proxy_cache_key "$request_method|$scheme://$host$request_uri";
                  proxy_ignore_headers Set-Cookie;
                  add_header X-Cache-Status $upstream_cache_status;
                }
              }
            }
            EOF

            cd ~/deploy/service && docker compose pull && docker compose up -d
